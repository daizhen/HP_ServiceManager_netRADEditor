using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SM.Smorgasbord.RADParser
{
    public class AssignmentStatement:BaseStatement
    {
        public AssignmentStatement()
        {
            Type = StatementType.Assignment;
        }
       private BaseExpression leftExpression;
       private RADToken signToken;
       private BaseExpression rightExpression;

       public BaseExpression LeftExpression
       {
           get
           {
               return leftExpression;
           }
           set
           {
               leftExpression = value;
           }
       }
       public RADToken SignToken
       {
           get
           {
               return signToken;
           }
           set
           {
               signToken = value;
           }
       }
       public BaseExpression RightExpression
       {
           get
           {
               return rightExpression;
           }
           set
           {
               rightExpression = value;
           }
       }

       public override string ToString(int nestLevel)
       {
           StringBuilder str = new StringBuilder();
           for (int i = 0; i < nestLevel; i++)
           {
               str.Append("    ");
           }

           string leftString = leftExpression.ToString();
           if (leftString.CompareTo("$L.comments.AutoGenerated.byEDITOR") == 0)
           {
               str.Append("//");
               str.Append(StringHelper.UnescapeString(rightExpression.ToString()));
           }
           else
           {
               str.Append(leftString);
               str.Append(" ");
               str.Append(signToken.TokenValue);
               str.Append(" ");
               str.Append(rightExpression.ToString());
           }
           return str.ToString();
       }

       public override string ToString()
       {
           StringBuilder str = new StringBuilder();
           str.Append(leftExpression.ToString());
           str.Append(" ");
           str.Append(signToken.TokenValue);
           str.Append(" ");
           str.Append(rightExpression.ToString());
           return str.ToString();
       }
    }
}
